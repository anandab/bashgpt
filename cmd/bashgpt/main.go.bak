/* Copyright Â© 2023 Mike Brown. All Rights Reserved.
 *
 * See LICENSE file at the root of this package for license terms
 */
package main

import (
	"context"
	_ "embed"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"strings"
	"syscall"
	"time"

	"github.com/sashabaranov/go-openai"
)

const (
	KeyFile = ".openai.key"
)

const SystemMsg = `You are bash shell autocompletion utility. Users are invoking you 
via a terminal by writing a query at the bash prompt and utilizing bash's autocomplete 
feature to convert their query into appropriate bash commands. Please write your 
responses in strict bash shell syntax without any additional information. Only respond
with a single code block which encapsultes the user's query.`

var subCommandTab = map[string]func(args []string) error{
	"help":    helpMain,
	"sh":      shMain,
	"upgrade": upgradeMain,
	"version": versionMain,
}

//go:embed help.txt
var helpText string

func helpMain(args []string) error {
	fmt.Printf(helpText)

	return nil
}

//go:embed version.txt
var versionText string

const DevVersionText = "v0.devbuild"

func loadKey() string {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		panic("cannot read homedir")
	}
	keyPath := path.Join(homeDir, KeyFile)
	data, err := ioutil.ReadFile(keyPath)
	if err != nil {
		panic("cannot read key")
	}
	return string(data)
}

func versionMain(args []string) error {
	fmt.Printf("bashgpt-%v\n", versionText)

	return nil
}

func upgradeMain(args []string) error {
	if versionText == DevVersionText {
		fmt.Fprintf(os.Stderr, "Skipping bashgpt upgrade on development version\n")
		return nil
	}
	latestVer, err := getLatestVersion()
	if err != nil {
		return err
	}
	if latestVer == versionText {
		fmt.Printf("bashgpt %v is already the latest version\n",
			versionText)
		return nil
	}

	fmt.Printf("A new version of bashgpt is available (%v). Upgrade? (Y/N) [Y]: ",
		latestVer)
	shouldUpgrade := "Y"
	fmt.Scanf("%s", &shouldUpgrade)
	shouldUpgrade = strings.ToUpper(strings.TrimSpace(shouldUpgrade))

	if shouldUpgrade[0] != 'Y' {
		return nil
	}

	fmt.Printf("Upgrading bashgpt from %v to %v...\n", versionText,
		latestVer)

	return upgradeViaGithub(latestVer)
}

func getLatestVersion() (string, error) {
	const LatestReleaseUrl = "https://api.github.com/repos/mikeb26/bashgpt/releases/latest"

	client := http.Client{
		Timeout: time.Second * 30,
	}

	resp, err := client.Get(LatestReleaseUrl)
	if err != nil {
		return "", err
	}

	releaseJsonDoc, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}
	var releaseDoc map[string]any
	err = json.Unmarshal(releaseJsonDoc, &releaseDoc)
	if err != nil {
		return "", err
	}

	latestRelease, ok := releaseDoc["tag_name"].(string)
	if !ok {
		return "", fmt.Errorf("Could not parse %v", LatestReleaseUrl)
	}

	return latestRelease, nil
}

func upgradeViaGithub(latestVer string) error {
	const LatestDownloadFmt = "https://github.com/mikeb26/bashgpt/releases/download/%v/bashgpt"

	client := http.Client{
		Timeout: time.Second * 30,
	}

	resp, err := client.Get(fmt.Sprintf(LatestDownloadFmt, latestVer))
	if err != nil {
		return fmt.Errorf("Failed to download version %v: %w", versionText, err)

	}

	tmpFile, err := os.CreateTemp("", "bashgpt-*")
	if err != nil {
		return fmt.Errorf("Failed to create temp file: %w", err)
	}
	binaryContent, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("Failed to download version %v: %w", versionText, err)
	}
	_, err = tmpFile.Write(binaryContent)
	if err != nil {
		return fmt.Errorf("Failed to download version %v: %w", versionText, err)
	}
	err = tmpFile.Chmod(0755)
	if err != nil {
		return fmt.Errorf("Failed to download version %v: %w", versionText, err)
	}
	err = tmpFile.Close()
	if err != nil {
		return fmt.Errorf("Failed to download version %v: %w", versionText, err)
	}
	myBinaryPath, err := os.Executable()
	if err != nil {
		return fmt.Errorf("Could not determine path to bashgpt: %w", err)
	}
	myBinaryPath, err = filepath.EvalSymlinks(myBinaryPath)
	if err != nil {
		return fmt.Errorf("Could not determine path to bashgpt: %w", err)
	}

	myBinaryPathBak := myBinaryPath + ".bak"
	err = os.Rename(myBinaryPath, myBinaryPathBak)
	if err != nil {
		return fmt.Errorf("Could not replace existing %v; do you need to be root?: %w",
			myBinaryPath, err)
	}
	err = os.Rename(tmpFile.Name(), myBinaryPath)
	if errors.Is(err, syscall.EXDEV) {
		// invalid cross device link occurs when rename() is attempted aross
		// different filesystems; copy instead
		err = ioutil.WriteFile(myBinaryPath, binaryContent, 0755)
		_ = os.Remove(tmpFile.Name())
	}
	if err != nil {
		err := fmt.Errorf("Could not replace existing %v; do you need to be root?: %w",
			myBinaryPath, err)
		_ = os.Rename(myBinaryPathBak, myBinaryPath)
		return err
	}
	_ = os.Remove(myBinaryPathBak)

	fmt.Printf("Upgrade %v to %v complete\n", myBinaryPath, latestVer)

	return nil
}

func checkAndPrintUpgradeWarning() bool {
	if versionText == DevVersionText {
		return false
	}
	latestVer, err := getLatestVersion()
	if err != nil {
		return false
	}
	if latestVer == versionText {
		return false
	}

	fmt.Fprintf(os.Stderr, "*WARN*: A new version of bashgpt is available (%v). Please upgrade via 'bashgpt upgrade'.\n\n",
		latestVer)

	return true
}

func sliceToString(slice []string) string {
	var str string
	for _, s := range slice {
		str += s + " "
	}
	return str
}

func shMain(args []string) error {
	client := openai.NewClient(loadKey())
	prompt := sliceToString(args)

	dialogue := []openai.ChatCompletionMessage{
		{Role: openai.ChatMessageRoleSystem, Content: SystemMsg},
		{Role: openai.ChatMessageRoleUser, Content: prompt},
	}

	resp, err := client.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model:    openai.GPT3Dot5Turbo,
			Messages: dialogue,
		},
	)

	if err != nil {
		return err
	}

	if len(resp.Choices) != 1 {
		return fmt.Errorf("Expected 1 response, got %v", len(resp.Choices))
	}
	cmdStr, err := parseResponse(resp.Choices[0].Message.Content)
	if err != nil {
		return err
	}

	fmt.Printf("WHAT THE FUCKING FUCK2?!\n")
	fmt.Printf("%v", cmdStr)

	fmt.Fprintf(os.Stderr, "FULL RESPONSE: %v\n", resp.Choices[0].Message.Content)
	fmt.Fprintf(os.Stderr, "PARSE RESPONSE: %v\n", cmdStr)

	return nil
}

func parseResponse(resp string) (string, error) {
	if strings.Contains(resp, "```") {
		var sb strings.Builder
		isCmdText := false

		for _, respLine := range strings.Split(resp, "\n") {
			if strings.HasPrefix(respLine, "```") {
				isCmdText = !isCmdText
			} else if isCmdText {
				sb.WriteString(respLine + "\n")
			}
		}

		return sb.String(), nil
	}
	return resp, nil
}

func main() {
	fmt.Printf("WHAT THE FUCKING FUCK1?!\n")
	var args []string
	if len(os.Args) > 1 {
		args = os.Args[1:]
	}

	subCommandName := ""
	if len(args) > 0 {
		subCommandName = args[0]
	}
	exitStatus := 0

	if len(args) > 1 {
		args = args[1:]
	}

	if subCommandName != "upgrade" {
		checkAndPrintUpgradeWarning()
	}

	var err error
	if subCommandName == "" {
		err = shMain(args)
	} else {
		subCommand, ok := subCommandTab[subCommandName]
		if !ok {
			subCommand = helpMain
			exitStatus = 1
		}
		err = subCommand(args)
	}

	if err != nil {
		fmt.Fprintf(os.Stderr, "%v\n", err)
		exitStatus = 1
	}

	os.Exit(exitStatus)

}
